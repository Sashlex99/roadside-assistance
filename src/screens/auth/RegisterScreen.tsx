import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  Image,
} from 'react-native';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import { StackNavigationProp } from '@react-navigation/stack';
import * as ImagePicker from 'expo-image-picker';
import { colors } from '../../constants/colors';
import { signUp, createDocument, uploadFile } from '../../services/firebaseAPI';
import { sendSMSVerificationCode, verifySMSCode } from '../../services/smsService';
import { AuthStackParamList } from '../../navigation/AuthStack';
import CustomAlert from '../../components/CustomAlert';
import ImagePickerModal from '../../components/ImagePickerModal';

type RegisterScreenNavigationProp = StackNavigationProp<AuthStackParamList, 'Register'>;
type UserType = 'client' | 'driver';

interface Props {
  navigation: RegisterScreenNavigationProp;
}

export default function RegisterScreen({ navigation }: Props) {
  const [userType, setUserType] = useState<UserType>('client');
  const [loading, setLoading] = useState(false);
  const [verifyingPhone, setVerifyingPhone] = useState(false);
  const [phoneVerified, setPhoneVerified] = useState(false);
  const [showVerificationCode, setShowVerificationCode] = useState(false);

  // Alert states
  const [alertVisible, setAlertVisible] = useState(false);
  const [alertTitle, setAlertTitle] = useState('');
  const [alertMessage, setAlertMessage] = useState('');
  const [alertType, setAlertType] = useState<'success' | 'error' | 'info'>('info');

  // Image picker states
  const [imagePickerVisible, setImagePickerVisible] = useState(false);
  const [currentImageType, setCurrentImageType] = useState<'roadsideAssistance' | 'iaala' | 'driverPhoto'>('roadsideAssistance');

  // –û—Å–Ω–æ–≤–Ω–∏ –ø–æ–ª–µ—Ç–∞
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const [phone, setPhone] = useState('');
  const [verificationCode, setVerificationCode] = useState('');

  // –®–æ—Ñ—å–æ—Ä—Å–∫–∏ –ø–æ–ª–µ—Ç–∞
  const [companyName, setCompanyName] = useState('');
  const [companyBulstat, setCompanyBulstat] = useState('');
  const [roadsideAssistanceCert, setRoadsideAssistanceCert] = useState<string | null>(null);
  const [iaalaLicense, setIaalaLicense] = useState<string | null>(null);
  const [driverPhoto, setDriverPhoto] = useState<string | null>(null);

  // Helper function to show custom alert
  const showAlert = (title: string, message: string, type: 'success' | 'error' | 'info' = 'info') => {
    setAlertTitle(title);
    setAlertMessage(message);
    setAlertType(type);
    setAlertVisible(true);
  };

  const pickImage = async (type: 'roadsideAssistance' | 'iaala' | 'driverPhoto') => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      showAlert('–ì—Ä–µ—à–∫–∞', '–ù—É–∂–Ω–æ –µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –≥–∞–ª–µ—Ä–∏—è—Ç–∞', 'error');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 0.8,
    });

    if (!result.canceled && result.assets[0]) {
      const imageUri = result.assets[0].uri;
      switch (type) {
        case 'roadsideAssistance':
          setRoadsideAssistanceCert(imageUri);
          break;
        case 'iaala':
          setIaalaLicense(imageUri);
          break;
        case 'driverPhoto':
          setDriverPhoto(imageUri);
          break;
      }
    }
    setImagePickerVisible(false);
  };

  const takePhoto = async (type: 'roadsideAssistance' | 'iaala' | 'driverPhoto') => {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== 'granted') {
      showAlert('–ì—Ä–µ—à–∫–∞', '–ù—É–∂–Ω–æ –µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∫–∞–º–µ—Ä–∞—Ç–∞', 'error');
      return;
    }

    const result = await ImagePicker.launchCameraAsync({
      allowsEditing: true,
      quality: 0.8,
    });

    if (!result.canceled && result.assets[0]) {
      const imageUri = result.assets[0].uri;
      switch (type) {
        case 'roadsideAssistance':
          setRoadsideAssistanceCert(imageUri);
          break;
        case 'iaala':
          setIaalaLicense(imageUri);
          break;
        case 'driverPhoto':
          setDriverPhoto(imageUri);
          break;
      }
    }
    setImagePickerVisible(false);
  };

  const showImagePicker = (type: 'roadsideAssistance' | 'iaala' | 'driverPhoto') => {
    setCurrentImageType(type);
    setImagePickerVisible(true);
  };

  const sendVerificationCode = async () => {
    if (!phone || phone.length < 9) {
      showAlert('–ì—Ä–µ—à–∫–∞', '–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä (–ø–æ–Ω–µ 9 —Ü–∏—Ñ—Ä–∏)', 'error');
      return;
    }

    setVerifyingPhone(true);
    
    try {
      await sendSMSVerificationCode(phone);
      setShowVerificationCode(true);
      showAlert(
        '–ö–æ–¥ –∏–∑–ø—Ä–∞—Ç–µ–Ω', 
        `–ò–∑–ø—Ä–∞—Ç–∏—Ö–º–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω –∫–æ–¥ –Ω–∞ ${phone} —á—Ä–µ–∑ SMS.\n\nüîî –í –î–ï–ú–û –†–ï–ñ–ò–ú:\n–ö–æ–¥—ä—Ç —Å–µ –ø–æ–∫–∞–∑–≤–∞ –∫–∞—Ç–æ pop-up alert –∏ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞ –Ω–∞ –±—Ä–∞—É–∑—ä—Ä–∞/—Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n‚è∞ –ö–æ–¥—ä—Ç –µ –≤–∞–ª–∏–¥–µ–Ω 5 –º–∏–Ω—É—Ç–∏.`,
        'success'
      );
    } catch (error: any) {
      showAlert('–ì—Ä–µ—à–∫–∞', error.message, 'error');
    }
    
    setVerifyingPhone(false);
  };

  const verifyPhoneCodeHandler = async () => {
    if (!verificationCode || verificationCode.length !== 6) {
      showAlert('–ì—Ä–µ—à–∫–∞', '–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ 6-—Ü–∏—Ñ—Ä–µ–Ω–∏—è –∫–æ–¥', 'error');
      return;
    }

    setVerifyingPhone(true);

    try {
      await verifySMSCode(phone, verificationCode);
      setPhoneVerified(true);
      setShowVerificationCode(false);
      showAlert('–£—Å–ø–µ—Ö', '–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏—è—Ç –Ω–æ–º–µ—Ä –µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–Ω!', 'success');
    } catch (error: any) {
      showAlert('–ì—Ä–µ—à–∫–∞', error.message, 'error');
    }

    setVerifyingPhone(false);
  };

  const handleRegister = async () => {
    if (!email || !password || !fullName || !phone) {
      showAlert('–ì—Ä–µ—à–∫–∞', '–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏ –ø–æ–ª–µ—Ç–∞', 'error');
      return;
    }

    if (password !== confirmPassword) {
      showAlert('–ì—Ä–µ—à–∫–∞', '–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç', 'error');
      return;
    }

    if (userType === 'driver') {
      if (!companyName || !companyBulstat) {
        showAlert('–ì—Ä–µ—à–∫–∞', '–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Ñ–∏—Ä–º–∞—Ç–∞', 'error');
        return;
      }
      if (!roadsideAssistanceCert || !iaalaLicense || !driverPhoto) {
        showAlert('–ì—Ä–µ—à–∫–∞', '–ú–æ–ª—è, –∫–∞—á–µ—Ç–µ –≤—Å–∏—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∏ —Å–Ω–∏–º–∫–∞', 'error');
        return;
      }
    }

    setLoading(true);

    try {
      const userData = await signUp(email, password);
      
      let userProfile: any = {
        email,
        fullName,
        phone,
        phoneVerified: false,
        userType,
        createdAt: new Date(),
      };

      if (userType === 'driver') {
        // –ö–∞—á–≤–∞–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ
        const [roadsideCertUrl, iaalaUrl, photoUrl] = await Promise.all([
          uploadFile(roadsideAssistanceCert!, `roadside_cert_${userData.localId}`, userData.idToken),
          uploadFile(iaalaLicense!, `iaala_license_${userData.localId}`, userData.idToken),
          uploadFile(driverPhoto!, `driver_photo_${userData.localId}`, userData.idToken),
        ]);

        userProfile = {
          ...userProfile,
          companyInfo: {
            name: companyName,
            bulstat: companyBulstat,
          },
          documents: {
            roadsideAssistanceCert: roadsideCertUrl.name,
            iaalaLicense: iaalaUrl.name,
            driverPhoto: photoUrl.name,
          },
          // Initialize document verification status
          documentsStatus: {
            roadsideAssistanceCert: 'pending',
            iaalaLicense: 'pending',
            driverPhoto: 'pending',
          },
          documentsVerifiedAt: {
            roadsideAssistanceCert: null,
            iaalaLicense: null,
            driverPhoto: null,
          },
          documentsRejectionReasons: {
            roadsideAssistanceCert: null,
            iaalaLicense: null,
            driverPhoto: null,
          },
          status: 'pending',
          isActive: false,
        };
      }

      await createDocument('users', userProfile, userData.idToken);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞
      console.log('Registration successful!');
      
      let successMessage = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!';
      
      if (__DEV__) {
        successMessage += '\n\nüîß DEVELOPMENT MODE:\n';
        successMessage += '‚Ä¢ –§–∞–π–ª–æ–≤–µ—Ç–µ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞—Ç –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º\n';
        successMessage += '‚Ä¢ –í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ —Å–µ –∑–∞–ø–∞–∑–≤–∞—Ç –ø—Ä–∞–≤–∏–ª–Ω–æ\n';
        successMessage += '‚Ä¢ –¢–æ–≤–∞ –µ –Ω–æ—Ä–º–∞–ª–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ\n\n';
        successMessage += '‚è≥ –°–ª–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —â–µ –º–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–∏–µ–º–∞—Ç–µ –∑–∞—è–≤–∫–∏.';
      } else {
        successMessage += '\n\n‚è≥ –°–ª–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —â–µ –º–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–∏–µ–º–∞—Ç–µ –∑–∞—è–≤–∫–∏.';
      }
      
      showAlert(
        '–£—Å–ø–µ—Ö!', 
        successMessage,
        'success'
      );
      
      // –ü—Ä–µ—Ö–≤—ä—Ä–ª—è–º–µ –∫—ä–º LoginScreen
      navigation.navigate('Login');
      
    } catch (error: any) {
      console.error('Registration error:', error);
      
      let message = '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞';
      
      // Firebase Auth errors
      if (error.message === 'EMAIL_EXISTS') {
        message = '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞';
      } else if (error.message === 'WEAK_PASSWORD') {
        message = '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞';
      } else if (error.message === 'INVALID_EMAIL') {
        message = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å';
      } 
      // Firestore errors
      else if (error.code === 'permission-denied') {
        message = '–ù—è–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞ –∑–∞–ø–∏—Å –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ';
      } else if (error.code === 'unavailable') {
        message = '–£—Å–ª—É–≥–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ';
      } 
      // Storage errors
      else if (error.message?.includes('storage')) {
        message = '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ç–µ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ';
      }
      // Network errors
      else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        message = '–ù—è–º–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å–∏';
      }
      // Show the actual error message for debugging in development
      else if (__DEV__) {
        message = `–ì—Ä–µ—à–∫–∞: ${error.message || JSON.stringify(error)}`;
      }
      
      showAlert('–ì—Ä–µ—à–∫–∞', message, 'error');
    }

    setLoading(false);
  };

  const renderUserTypeSelector = () => (
    <View style={styles.userTypeContainer}>
      <TouchableOpacity
        style={[styles.userTypeButton, userType === 'client' && styles.userTypeButtonActive]}
        onPress={() => setUserType('client')}
      >
        <Text style={[styles.userTypeText, userType === 'client' && styles.userTypeTextActive]}>
          –ö–ª–∏–µ–Ω—Ç
        </Text>
      </TouchableOpacity>
      
      <TouchableOpacity
        style={[styles.userTypeButton, userType === 'driver' && styles.userTypeButtonActive]}
        onPress={() => setUserType('driver')}
      >
        <Text style={[styles.userTypeText, userType === 'driver' && styles.userTypeTextActive]}>
          –®–æ—Ñ—å–æ—Ä
        </Text>
      </TouchableOpacity>
    </View>
  );

  const renderImagePicker = (
    title: string, 
    imageUri: string | null, 
    type: 'roadsideAssistance' | 'iaala' | 'driverPhoto'
  ) => (
    <View style={styles.imagePickerContainer}>
      <Text style={styles.imagePickerLabel}>{title}</Text>
      <TouchableOpacity 
        style={styles.imagePickerButton}
        onPress={() => showImagePicker(type)}
      >
        {imageUri ? (
          <Image source={{ uri: imageUri }} style={styles.pickedImage} />
        ) : (
          <Text style={styles.imagePickerText}>–î–æ–±–∞–≤–∏ —Å–Ω–∏–º–∫–∞</Text>
        )}
      </TouchableOpacity>
    </View>
  );

  const renderDriverFields = () => (
    <>
      <Text style={styles.sectionTitle}>–î–∞–Ω–Ω–∏ –∑–∞ —Ñ–∏—Ä–º–∞—Ç–∞</Text>
      <TextInput
        style={styles.input}
        placeholder="–ò–º–µ –Ω–∞ —Ñ–∏—Ä–º–∞"
        value={companyName}
        onChangeText={setCompanyName}
      />
      <TextInput
        style={styles.input}
        placeholder="–ë—É–ª—Å—Ç–∞—Ç –Ω–∞ —Ñ–∏—Ä–º–∞"
        value={companyBulstat}
        onChangeText={setCompanyBulstat}
        keyboardType="numeric"
      />

      <Text style={styles.sectionTitle}>–î–æ–∫—É–º–µ–Ω—Ç–∏</Text>
      {renderImagePicker('–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∑–∞ –ø—ä—Ç–Ω–∞ –ø–æ–º–æ—â', roadsideAssistanceCert, 'roadsideAssistance')}
      {renderImagePicker('–õ–∏—Ü–µ–Ω–∑ –æ—Ç –ò–ê–ê–ê', iaalaLicense, 'iaala')}
      {renderImagePicker('–°–Ω–∏–º–∫–∞ –Ω–∞ —à–æ—Ñ—å–æ—Ä', driverPhoto, 'driverPhoto')}
    </>
  );

  const getImagePickerTitle = () => {
    switch (currentImageType) {
      case 'roadsideAssistance':
        return '–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∑–∞ –ø—ä—Ç–Ω–∞ –ø–æ–º–æ—â';
      case 'iaala':
        return '–õ–∏—Ü–µ–Ω–∑ –æ—Ç –ò–ê–ê–ê';
      case 'driverPhoto':
        return '–°–Ω–∏–º–∫–∞ –Ω–∞ —à–æ—Ñ—å–æ—Ä';
      default:
        return '–ò–∑–±–æ—Ä –Ω–∞ —Å–Ω–∏–º–∫–∞';
    }
  };

  return (
    <>
      <KeyboardAwareScrollView 
        style={styles.container}
        contentContainerStyle={styles.contentContainer}
        enableOnAndroid={true}
        enableAutomaticScroll={true}
        keyboardShouldPersistTaps="handled"
        showsVerticalScrollIndicator={false}
        extraHeight={120}
        extraScrollHeight={120}
        keyboardOpeningTime={0}
        resetScrollToCoords={{ x: 0, y: 0 }}
      >
        <Text style={styles.title}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Text>
        <Text style={styles.subtitle}>–°—ä–∑–¥–∞–π—Ç–µ –Ω–æ–≤ –ø—Ä–æ—Ñ–∏–ª</Text>

        {renderUserTypeSelector()}

        <Text style={styles.sectionTitle}>–û—Å–Ω–æ–≤–Ω–∏ –¥–∞–Ω–Ω–∏</Text>
        <TextInput
          style={styles.input}
          placeholder="–ò–º–µ –∏ —Ñ–∞–º–∏–ª–∏—è"
          value={fullName}
          onChangeText={setFullName}
        />

        <TextInput
          style={styles.input}
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
          value={phone}
          onChangeText={setPhone}
          keyboardType="phone-pad"
        />

        <TextInput
          style={styles.input}
          placeholder="–ò–º–µ–π–ª"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />

        <TextInput
          style={styles.input}
          placeholder="–ü–∞—Ä–æ–ª–∞"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />

        <TextInput
          style={styles.input}
          placeholder="–ü–æ—Ç–≤—ä—Ä–¥–∏ –ø–∞—Ä–æ–ª–∞"
          value={confirmPassword}
          onChangeText={setConfirmPassword}
          secureTextEntry
        />

        {userType === 'driver' && renderDriverFields()}

        <TouchableOpacity 
          style={[styles.button, loading && styles.buttonDisabled]} 
          onPress={handleRegister}
          disabled={loading}
        >
          {loading ? (
            <ActivityIndicator color={colors.textOnPrimary} />
          ) : (
            <Text style={styles.buttonText}>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–π —Å–µ</Text>
          )}
        </TouchableOpacity>

        <TouchableOpacity style={styles.linkButton}>
          <Text style={styles.linkText}>–ò–º–∞—Ç–µ –ø—Ä–æ—Ñ–∏–ª?</Text>
          <TouchableOpacity 
            style={styles.loginButton}
            onPress={() => navigation.navigate('Login')}
          >
            <Text style={styles.loginButtonText}>–í–ª–µ–∑—Ç–µ —Ç—É–∫</Text>
          </TouchableOpacity>
        </TouchableOpacity>
      </KeyboardAwareScrollView>

      <CustomAlert
        visible={alertVisible}
        title={alertTitle}
        message={alertMessage}
        type={alertType}
        onClose={() => setAlertVisible(false)}
      />

      <ImagePickerModal
        visible={imagePickerVisible}
        title={getImagePickerTitle()}
        onCamera={() => takePhoto(currentImageType)}
        onGallery={() => pickImage(currentImageType)}
        onCancel={() => setImagePickerVisible(false)}
      />
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  contentContainer: {
    paddingHorizontal: 20,
    paddingVertical: 40,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: colors.text,
    textAlign: 'center',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 18,
    color: colors.textSecondary,
    textAlign: 'center',
    marginBottom: 30,
  },
  userTypeContainer: {
    flexDirection: 'row',
    backgroundColor: colors.surface,
    borderRadius: 10,
    marginBottom: 30,
    padding: 4,
  },
  userTypeButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 8,
  },
  userTypeButtonActive: {
    backgroundColor: colors.primary,
  },
  userTypeText: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.textSecondary,
  },
  userTypeTextActive: {
    color: colors.textOnPrimary,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 15,
    marginTop: 10,
  },
  input: {
    backgroundColor: colors.surface,
    borderRadius: 10,
    paddingHorizontal: 20,
    paddingVertical: 15,
    fontSize: 16,
    borderWidth: 1,
    borderColor: colors.border,
    marginBottom: 15,
  },
  inputVerified: {
    borderColor: colors.success,
    backgroundColor: '#F8FFF8',
  },
  phoneContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 0,
  },
  phoneInput: {
    flex: 1,
    marginRight: 10,
    marginBottom: 15,
  },
  verifyButton: {
    backgroundColor: colors.primary,
    paddingHorizontal: 15,
    paddingVertical: 15,
    borderRadius: 10,
    marginBottom: 15,
  },
  verifyButtonText: {
    color: colors.textOnPrimary,
    fontSize: 14,
    fontWeight: 'bold',
  },
  verifiedIcon: {
    backgroundColor: colors.success,
    width: 50,
    height: 50,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 15,
  },
  verifiedText: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },
  verificationContainer: {
    marginBottom: 15,
  },
  imagePickerContainer: {
    marginBottom: 20,
  },
  imagePickerLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 10,
  },
  imagePickerButton: {
    backgroundColor: colors.surface,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: colors.border,
    borderStyle: 'dashed',
    height: 120,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imagePickerText: {
    color: colors.textSecondary,
    fontSize: 16,
  },
  pickedImage: {
    width: '100%',
    height: '100%',
    borderRadius: 8,
  },
  button: {
    backgroundColor: colors.primary,
    borderRadius: 10,
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 20,
  },
  buttonText: {
    color: colors.textOnPrimary,
    fontSize: 18,
    fontWeight: 'bold',
  },
  buttonDisabled: {
    backgroundColor: colors.textSecondary,
  },
  linkButton: {
    marginTop: 20,
    alignItems: 'center',
  },
  linkText: {
    color: colors.textSecondary,
    fontSize: 16,
  },
  loginButton: {
    marginTop: 10,
    paddingHorizontal: 30,
    paddingVertical: 10,
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: colors.primary,
    borderRadius: 20,
  },
  loginButtonText: {
    color: colors.primary,
    fontSize: 16,
    fontWeight: 'bold',
  },
}); 