import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Chip,
  Typography,
  Button,
  Menu,
  MenuItem,
  Alert,
  Snackbar
} from '@mui/material';
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams
} from '@mui/x-data-grid';
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  MoreVert as MoreVertIcon,
  CheckCircle as ApproveIcon,
  Cancel as RejectIcon,
  ToggleOn,
  ToggleOff,
  VerifiedUser as VerifiedIcon,
  PersonOff as UnverifiedIcon,
  Phone as PhoneIcon,
  Build as MigrationIcon,
  PhotoCamera as TestImageIcon
} from '@mui/icons-material';
import { User, UserTableRow } from '../types/User';
import { 
  getAllUsers, 
  deleteUser, 
  toggleUserStatus, 
  approveDriver, 
  rejectDriver,
  togglePhoneVerification,
  getDocumentVerificationSummary
} from '../services/userService';
import { migrateUsersAddDocumentFields } from '../services/migrationService';
import UserEditDialog from './UserEditDialog';
import ImageTestDialog from './ImageTestDialog';

export default function UsersTable() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [editUser, setEditUser] = useState<User | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });
  const [error, setError] = useState<string | null>(null);
  const [migrating, setMigrating] = useState(false);
  const [imageTestOpen, setImageTestOpen] = useState(false);

  const loadUsers = useCallback(async () => {
    try {
      setLoading(true);
      console.log('üîÑ Loading users from Firestore...');
      const usersData = await getAllUsers();
      console.log('‚úÖ Loaded users:', usersData.length);
      console.log('üë• Users data:', usersData);
      setUsers(usersData);
    } catch (error) {
      console.error('‚ùå Error loading users:', error);
      setError('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadUsers();
  }, [loadUsers]);

  const showSnackbar = (message: string, severity: 'success' | 'error') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleMigration = async () => {
    if (!window.confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ? –¢–æ–≤–∞ —â–µ –¥–æ–±–∞–≤–∏ –ª–∏–ø—Å–≤–∞—â–∏—Ç–µ –ø–æ–ª–µ—Ç–∞ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–∞ —à–æ—Ñ—å–æ—Ä–∏—Ç–µ.')) {
      return;
    }
    
    try {
      setMigrating(true);
      await migrateUsersAddDocumentFields();
      await loadUsers(); // Reload users after migration
      showSnackbar('–ú–∏–≥—Ä–∞—Ü–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!', 'success');
    } catch (error) {
      showSnackbar('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏—è', 'error');
    } finally {
      setMigrating(false);
    }
  };

  const handleEdit = (user: User) => {
    setEditUser(user);
    setEditDialogOpen(true);
  };

  const handleDelete = async (user: User) => {
    if (window.confirm(`–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ ${user.fullName}?`)) {
      try {
        await deleteUser(user.id);
        showSnackbar('–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ', 'success');
        loadUsers();
      } catch (error) {
        showSnackbar('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è', 'error');
      }
    }
  };

  const handleToggleStatus = async (user: User) => {
    try {
      await toggleUserStatus(user.id, user.isActive || false);
      showSnackbar(
        `–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ ${user.isActive ? '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω' : '–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω'} —É—Å–ø–µ—à–Ω–æ`,
        'success'
      );
      loadUsers();
    } catch (error) {
      showSnackbar('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
  };

  const handleToggleVerification = async (user: User) => {
    try {
      await togglePhoneVerification(user.id, user.phoneVerified);
      showSnackbar(
        `–¢–µ–ª–µ—Ñ–æ–Ω—ä—Ç –µ ${user.phoneVerified ? '–æ—Ç–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–Ω' : '–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–Ω'} —É—Å–ø–µ—à–Ω–æ`,
        'success'
      );
      loadUsers();
    } catch (error) {
      showSnackbar('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è—Ç–∞', 'error');
    }
  };

  const handleApprove = async (user: User) => {
    try {
      await approveDriver(user.id);
      showSnackbar('–®–æ—Ñ—å–æ—Ä—ä—Ç –µ –æ–¥–æ–±—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      loadUsers();
      handleMenuClose();
    } catch (error) {
      showSnackbar('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ —à–æ—Ñ—å–æ—Ä–∞', 'error');
    }
  };

  const handleReject = async (user: User) => {
    try {
      await rejectDriver(user.id);
      showSnackbar('–®–æ—Ñ—å–æ—Ä—ä—Ç –µ –æ—Ç—Ö–≤—ä—Ä–ª–µ–Ω', 'success');
      loadUsers();
      handleMenuClose();
    } catch (error) {
      showSnackbar('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç—Ö–≤—ä—Ä–ª—è–Ω–µ –Ω–∞ —à–æ—Ñ—å–æ—Ä–∞', 'error');
    }
  };

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, user: User) => {
    setAnchorEl(event.currentTarget);
    setSelectedUser(user);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedUser(null);
  };

  const columns: GridColDef[] = [
    {
      field: 'fullName',
      headerName: '–ò–º–µ',
      width: 200,
      renderCell: (params) => (
        <Box>
          <Typography variant="body2" fontWeight="bold">
            {params.value}
          </Typography>
          <Typography variant="caption" color="text.secondary">
            {params.row.userType === 'driver' ? '–®–æ—Ñ—å–æ—Ä' : '–ö–ª–∏–µ–Ω—Ç'}
          </Typography>
        </Box>
      )
    },
    {
      field: 'email',
      headerName: '–ò–º–µ–π–ª',
      width: 250
    },
    {
      field: 'phone',
      headerName: '–¢–µ–ª–µ—Ñ–æ–Ω',
      width: 150
    },
    {
      field: 'phoneVerified',
      headerName: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–Ω',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? '–î–∞' : '–ù–µ'}
          color={params.value ? 'success' : 'default'}
          size="small"
        />
      )
    },
    {
      field: 'status',
      headerName: '–°—Ç–∞—Ç—É—Å',
      width: 200,
      renderCell: (params) => {
        if (params.row.userType === 'client') {
          return (
            <Chip
              label={params.row.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
              color={params.row.isActive ? 'success' : 'default'}
              size="small"
            />
          );
        }
        
        // For drivers, show document verification status
        const user = params.row as User;
        const summary = getDocumentVerificationSummary(user);
        
        if (summary.allApproved) {
          return (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
              <Chip
                label="‚úÖ –í—Å–∏—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –æ–¥–æ–±—Ä–µ–Ω–∏"
                color="success"
                size="small"
              />
              <Chip
                label={user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                color={user.isActive ? 'success' : 'default'}
                size="small"
              />
            </Box>
          );
        } else if (summary.rejectedCount > 0) {
          return (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
              <Chip
                label={`‚ùå ${summary.rejectedCount} –æ—Ç—Ö–≤—ä—Ä–ª–µ–Ω–∏`}
                color="error"
                size="small"
              />
              <Chip
                label={`‚è≥ ${summary.pendingCount} —á–∞–∫–∞—Ç`}
                color="warning"
                size="small"
              />
            </Box>
          );
        } else {
          return (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
              <Chip
                label={`‚è≥ ${summary.pendingCount} –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–∞–∫–∞—Ç`}
                color="warning"
                size="small"
              />
              <Chip
                label={`‚úÖ ${summary.approvedCount} –æ–¥–æ–±—Ä–µ–Ω–∏`}
                color={summary.approvedCount > 0 ? 'success' : 'default'}
                size="small"
              />
            </Box>
          );
        }
      }
    },
    {
      field: 'companyName',
      headerName: '–§–∏—Ä–º–∞',
      width: 200,
      valueGetter: (value: any, row: User) => row.companyInfo?.name || '-'
    },
    {
      field: 'createdAt',
      headerName: '–°—ä–∑–¥–∞–¥–µ–Ω',
      width: 130,
      valueFormatter: (value: any) => {
        return new Date(value).toLocaleDateString('bg-BG');
      }
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: '–î–µ–π—Å—Ç–≤–∏—è',
      width: 120,
      getActions: (params: GridRowParams<User>) => {
        const user = params.row;
        const actions = [
          <GridActionsCellItem
            icon={<EditIcon />}
            label="–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π/–ü—Ä–µ–≥–ª–µ–¥–∞–π"
            onClick={() => handleEdit(user)}
          />
        ];

        // –ó–∞ —à–æ—Ñ—å–æ—Ä–∏ –¥–æ–±–∞–≤—è–º–µ –º–µ–Ω—é—Ç–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
        if (user.userType === 'driver') {
          actions.push(
            <GridActionsCellItem
              icon={<MoreVertIcon />}
              label="–ü–æ–≤–µ—á–µ –æ–ø—Ü–∏–∏"
              onClick={(event) => handleMenuClick(event, user)}
            />
          );
        } else {
          // –ó–∞ –∫–ª–∏–µ–Ω—Ç–∏ –¥–æ–±–∞–≤—è–º–µ —Å–∞–º–æ toggle —Å—Ç–∞—Ç—É—Å
          actions.push(
            <GridActionsCellItem
              icon={user.isActive ? <ToggleOff /> : <ToggleOn />}
              label={user.isActive ? "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–π" : "–ê–∫—Ç–∏–≤–∏—Ä–∞–π"}
              onClick={() => handleToggleStatus(user)}
            />
          );
        }

        return actions;
      }
    }
  ];

  const rows: UserTableRow[] = users.map(user => ({
    id: user.id,
    fullName: user.fullName,
    email: user.email,
    phone: user.phone,
    phoneVerified: user.phoneVerified,
    userType: user.userType,
    createdAt: user.createdAt.toISOString(),
    status: user.status,
    isActive: user.isActive,
    companyInfo: user.companyInfo
  }));

  return (
    <Box sx={{ height: 600, width: '100%' }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h5" component="h1">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
        </Typography>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button 
            variant="outlined"
            color="info"
            startIcon={<TestImageIcon />}
            onClick={() => setImageTestOpen(true)}
          >
            –¢–ï–°–¢ –°–ù–ò–ú–ö–ê
          </Button>
          <Button 
            variant="outlined"
            color="warning"
            startIcon={<MigrationIcon />}
            onClick={handleMigration}
            disabled={migrating}
          >
            {migrating ? '–ú–∏–≥—Ä–∏—Ä–∞...' : '–ú–∏–≥—Ä–∏—Ä–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∏'}
          </Button>
          <Button variant="contained" onClick={loadUsers}>
            –û–±–Ω–æ–≤–∏
          </Button>
        </Box>
      </Box>

      <DataGrid
        rows={rows}
        columns={columns}
        loading={loading}
        disableRowSelectionOnClick
        pageSizeOptions={[25, 50, 100]}
        initialState={{
          pagination: { paginationModel: { pageSize: 25 } }
        }}
      />

      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        {selectedUser?.userType === 'driver' && (
          <>
            {selectedUser?.status === 'pending' && (
              <MenuItem onClick={() => selectedUser && handleApprove(selectedUser)}>
                <ApproveIcon sx={{ mr: 1, color: 'success.main' }} />
                –û–¥–æ–±—Ä–∏ —à–æ—Ñ—å–æ—Ä–∞
              </MenuItem>
            )}
            {selectedUser?.status !== 'rejected' && (
              <MenuItem onClick={() => selectedUser && handleReject(selectedUser)}>
                <RejectIcon sx={{ mr: 1, color: 'error.main' }} />
                –û—Ç—Ö–≤—ä—Ä–ª–∏ —à–æ—Ñ—å–æ—Ä–∞
              </MenuItem>
            )}
            <MenuItem onClick={() => selectedUser && handleToggleStatus(selectedUser)}>
              {selectedUser?.isActive ? <ToggleOff sx={{ mr: 1 }} /> : <ToggleOn sx={{ mr: 1 }} />}
              {selectedUser?.isActive ? "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–π" : "–ê–∫—Ç–∏–≤–∏—Ä–∞–π"}
            </MenuItem>
            <MenuItem onClick={() => selectedUser && handleToggleVerification(selectedUser)}>
              {selectedUser?.phoneVerified ? <UnverifiedIcon sx={{ mr: 1 }} /> : <VerifiedIcon sx={{ mr: 1 }} />}
              {selectedUser?.phoneVerified ? "–ü—Ä–µ–º–∞—Ö–Ω–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è" : "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞–π —Ç–µ–ª–µ—Ñ–æ–Ω"}
            </MenuItem>
            <MenuItem onClick={() => selectedUser && handleDelete(selectedUser)} sx={{ color: 'error.main' }}>
              <DeleteIcon sx={{ mr: 1 }} />
              –ò–∑—Ç—Ä–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
            </MenuItem>
          </>
        )}
      </Menu>

      <UserEditDialog
        open={editDialogOpen}
        user={editUser}
        onClose={() => {
          setEditDialogOpen(false);
          setEditUser(null);
        }}
        onUserUpdated={loadUsers}
      />

      <ImageTestDialog
        open={imageTestOpen}
        onClose={() => setImageTestOpen(false)}
      />

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity} onClose={() => setSnackbar({ ...snackbar, open: false })}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
} 