// SMS –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—ä—Å SMS Gateway
// –ó–∞ –¥–µ–º–æ —Ü–µ–ª–∏ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å–∏–º—É–ª–∞—Ü–∏—è. –ó–∞ production —â–µ —Ç—Ä—è–±–≤–∞
// –¥–∞ —Å–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–∞ —Å –∏—Å—Ç–∏–Ω—Å–∫–∏ SMS provider –∫–∞—Ç–æ SMS.bg, VivaKom, –∏ –¥—Ä.

interface VerificationData {
  phone: string;
  code: string;
  timestamp: number;
}

// –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞ –∫–æ–¥–æ–≤–µ (–≤ production –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ Firebase/Database)
const verificationCodes: Map<string, VerificationData> = new Map();

// –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥
const generateVerificationCode = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS –∫–æ–¥
export const sendSMSVerificationCode = async (phoneNumber: string): Promise<void> => {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—è –Ω–æ–º–µ—Ä
    const formattedPhone = formatPhoneNumber(phoneNumber);
    const code = generateVerificationCode();
    
    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–æ–¥–∞ —Å timestamp (–≤–∞–ª–∏–¥–µ–Ω 5 –º–∏–Ω—É—Ç–∏)
    verificationCodes.set(formattedPhone, {
      phone: formattedPhone,
      code,
      timestamp: Date.now(),
    });

    // –î–ï–ú–û –†–ï–ñ–ò–ú: –ó–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–≤–∞–º–µ –∫–æ–¥–∞ –∏ –ø–æ–∫–∞–∑–≤–∞–º–µ alert
    console.log('='.repeat(50));
    console.log(`üîë SMS –í–ï–†–ò–§–ò–ö–ê–¶–ò–û–ù–ï–ù –ö–û–î üîë`);
    console.log(`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formattedPhone}`);
    console.log(`üî¢ –ö–æ–¥: ${code}`);
    console.log('='.repeat(50));
    
    // –í –¥–µ–º–æ —Ä–µ–∂–∏–º —Å—ä—â–æ —â–µ –≤—ä—Ä–Ω–µ–º –∫–æ–¥–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –≤ UI
    if (__DEV__) {
      // –ü–æ–∫–∞–∑–≤–∞–º–µ –∫–æ–¥–∞ –≤ alert –∑–∞ –ª–µ—Å–Ω–æ –∫–æ–ø–∏—Ä–∞–Ω–µ –≤ development mode
      setTimeout(() => {
        alert(`–î–ï–ú–û: SMS –∫–æ–¥ –∑–∞ ${formattedPhone} –µ: ${code}`);
      }, 100);
    }
    
    // –ó–ê PRODUCTION: –¢—É–∫ —â–µ –∏–∑–ø—Ä–∞—Ç–∏—Ç–µ –∏—Å—Ç–∏–Ω—Å–∫–∏ SMS
    // await sendRealSMS(formattedPhone, code);
    
    // –°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
  } catch (error) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS:', error);
    throw new Error('–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS');
  }
};

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –∫–æ–¥–∞
export const verifySMSCode = async (phoneNumber: string, code: string): Promise<boolean> => {
  try {
    const formattedPhone = formatPhoneNumber(phoneNumber);
    const verification = verificationCodes.get(formattedPhone);
    
    if (!verification) {
      throw new Error('–ù—è–º–∞ –∏–∑–ø—Ä–∞—Ç–µ–Ω –∫–æ–¥ –∑–∞ —Ç–æ–∑–∏ –Ω–æ–º–µ—Ä');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∫–æ–¥—ä—Ç –Ω–µ –µ –∏–∑—Ç–µ–∫—ä–ª (5 –º–∏–Ω—É—Ç–∏)
    const isExpired = Date.now() - verification.timestamp > 5 * 60 * 1000;
    if (isExpired) {
      verificationCodes.delete(formattedPhone);
      throw new Error('–ö–æ–¥—ä—Ç –µ –∏–∑—Ç–µ–∫—ä–ª');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–¥–∞
    if (verification.code !== code) {
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥');
    }
    
    // –£—Å–ø–µ—à–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –∫–æ–¥–∞
    verificationCodes.delete(formattedPhone);
    return true;
    
  } catch (error) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:', error);
    throw error;
  }
};

// –ó–ê PRODUCTION: –ò—Å—Ç–∏–Ω—Å–∫–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS
const sendRealSMS = async (phone: string, code: string): Promise<void> => {
  // –ü—Ä–∏–º–µ—Ä –∑–∞ SMS.bg API (—Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—Ç–µ –∑–∞ API –∫–ª—é—á)
  const apiUrl = 'https://api.sms.bg/send';
  const message = `–í–∞—à–∏—è—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω –∫–æ–¥ –∑–∞ –ø—ä—Ç–Ω–∞ –ø–æ–º–æ—â –µ: ${code}`;
  
  /* 
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer YOUR_SMS_API_KEY'
    },
    body: JSON.stringify({
      to: phone,
      message: message,
      from: 'RoadsideApp'
    })
  });
  
  if (!response.ok) {
    throw new Error('SMS API –≥—Ä–µ—à–∫–∞');
  }
  */
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—è –Ω–æ–º–µ—Ä –∑–∞ –ë—ä–ª–≥–∞—Ä–∏—è
const formatPhoneNumber = (phone: string): string => {
  // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤–∏ —Å–∏–º–≤–æ–ª–∏
  const cleanPhone = phone.replace(/\D/g, '');
  
  // –ê–∫–æ –∑–∞–ø–æ—á–≤–∞ —Å 0, –∑–∞–º–µ–Ω—è–º–µ —Å +359
  if (cleanPhone.startsWith('0')) {
    return '+359' + cleanPhone.substring(1);
  }
  
  // –ê–∫–æ –≤–µ—á–µ –∏–º–∞ +359, –≤—Ä—ä—â–∞–º–µ –∫–∞–∫—Ç–æ –µ
  if (phone.startsWith('+359')) {
    return phone;
  }
  
  // –ê–∫–æ –∑–∞–ø–æ—á–≤–∞ —Å 359, –¥–æ–±–∞–≤—è–º–µ +
  if (cleanPhone.startsWith('359')) {
    return '+' + cleanPhone;
  }
  
  // –ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ –¥–æ–±–∞–≤—è–º–µ +359
  return '+359' + cleanPhone;
};

// –ì–ª–æ–±–∞–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ debug –≤ development mode
if (__DEV__) {
  // @ts-ignore
  global.getVerificationCodes = () => {
    console.log('üì± –ê–ö–¢–ò–í–ù–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–û–ù–ù–ò –ö–û–î–û–í–ï:');
    console.log('='.repeat(40));
    if (verificationCodes.size === 0) {
      console.log('–ù—è–º–∞ –∞–∫—Ç–∏–≤–Ω–∏ –∫–æ–¥–æ–≤–µ');
    } else {
      verificationCodes.forEach((data, phone) => {
        const timeLeft = Math.max(0, 5 * 60 * 1000 - (Date.now() - data.timestamp));
        const minutesLeft = Math.floor(timeLeft / 60000);
        const secondsLeft = Math.floor((timeLeft % 60000) / 1000);
        console.log(`üì± ${phone}: ${data.code} (–≤–∞–ª–∏–¥–µ–Ω –æ—â–µ ${minutesLeft}:${secondsLeft.toString().padStart(2, '0')})`);
      });
    }
    console.log('='.repeat(40));
  };
  
  // @ts-ignore
  global.clearVerificationCodes = () => {
    verificationCodes.clear();
    console.log('üóëÔ∏è –í—Å–∏—á–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∏ –∫–æ–¥–æ–≤–µ —Å–∞ –∏–∑—á–∏—Å—Ç–µ–Ω–∏');
  };
} 